{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/njerimurugi-kamau/Flatiron/code/PHASE4/sailor-cards/frontend/src/Game.js\";\nimport React, { Component } from 'react';\nimport CardDeck from './CardDeck';\nexport class Game extends Component {\n  constructor() {\n    super();\n\n    this.onCardClick = card => {\n      console.log(this.state.checkCards.length < 2);\n\n      if (this.state.checkCards.length < 2 && !this.state.checkCards.includes(card)) {\n        this.setState({\n          checkCards: [...this.state.checkCards, card]\n        });\n      }\n\n      if (this.state.checkCards.length === 2) {\n        if (this.state.checkCards[0].pair_name === this.state.checkCards[1].pair_name) {\n          //let this state of 2 cards.push into matched cards array.push\n          let cardPair1 = this.state.checkCards[0];\n          let cardPair2 = this.state.checkCards[1];\n          this.setState({\n            matched: [...this.state.matched, cardPair1, cardPair2]\n          }); // let filterCards = this.state.cards.filter((card)=> !this.state.checkCards.includes(card))\n          // this.setState({cards: filterCards})\n\n          this.setState({\n            checkCards: []\n          });\n          console.log(\"you made a pair\");\n        } else {\n          console.log(\"no pair\");\n          this.setState({\n            checkCards: []\n          });\n        }\n      }\n    };\n\n    this.state = {\n      cards: [],\n      checkCards: [],\n      matched: []\n    };\n  }\n\n  componentDidMount() {\n    const gamesUrl = \"http://localhost:3000/games/\";\n    const charactersUrl = \"http://localhost:3000/characters/\";\n    const promises = Promise.all([fetch(gamesUrl), fetch(charactersUrl)]);\n    promises.then(results => Promise.all(results.map(r => r.json()))).then(console.log); // Promise.all\n    // https://stackoverflow.com/questions/52882903/componentdidmount-multiple-fetch-calls-best-practice\n\n    fetch(\"http://localhost:3000/cards\").then(response => response.json()).then(cards => this.setState({\n      cards\n    }));\n  }\n\n  //card is clicked, when click happens     \n  //set flipped state to true\n  // when the flipped state is set to true, render frontImg on that card\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(CardDeck, {\n        cardData: this.state.cards,\n        onCardClick: this.onCardClick,\n        checkCards: this.state.checkCards,\n        matched: this.state.matched\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Game;","map":{"version":3,"sources":["/Users/njerimurugi-kamau/Flatiron/code/PHASE4/sailor-cards/frontend/src/Game.js"],"names":["React","Component","CardDeck","Game","constructor","onCardClick","card","console","log","state","checkCards","length","includes","setState","pair_name","cardPair1","cardPair2","matched","cards","componentDidMount","gamesUrl","charactersUrl","promises","Promise","all","fetch","then","results","map","r","json","response","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport CardDeck from './CardDeck'\n\nexport class Game extends Component {\n    constructor(){\n        super();\n            this.state = {\n                cards: [],\n                checkCards: [],\n                matched: []\n            }\n    }\n\n    \n    \n    componentDidMount() {\n        const gamesUrl = \"http://localhost:3000/games/\"\n        const charactersUrl = \"http://localhost:3000/characters/\"\n\n        const promises = Promise.all([\n            fetch(gamesUrl),\n            fetch(charactersUrl),\n        ]);\n\n        promises.then((results) =>\n                Promise.all(results.map(r => r.json()))\n            ).then(console.log)\n        // Promise.all\n        // https://stackoverflow.com/questions/52882903/componentdidmount-multiple-fetch-calls-best-practice\n        fetch(\"http://localhost:3000/cards\")\n        .then((response) => response.json())\n        .then((cards) =>this.setState({cards}))\n    }\n\n    onCardClick = (card) => {\n        console.log(this.state.checkCards.length < 2)\n        if(this.state.checkCards.length < 2 && !this.state.checkCards.includes(card) ){\n            this.setState({checkCards: [...this.state.checkCards, card]}\n                )\n        }if(this.state.checkCards.length === 2){ \n            if(this.state.checkCards[0].pair_name === this.state.checkCards[1].pair_name){\n                //let this state of 2 cards.push into matched cards array.push\n                let cardPair1 = this.state.checkCards[0]\n                let cardPair2 = this.state.checkCards[1]\n\n                \n\n                this.setState({matched: [...this.state.matched, cardPair1, cardPair2]})\n                // let filterCards = this.state.cards.filter((card)=> !this.state.checkCards.includes(card))\n                // this.setState({cards: filterCards})\n                this.setState({checkCards: []})\n                console.log(\"you made a pair\")\n            }else{console.log(\"no pair\")\n            this.setState({checkCards: []})\n        }\n\n        }\n    }\n\n    \n\n  \n\n    \n          \n        \n        //card is clicked, when click happens     \n        //set flipped state to true\n        // when the flipped state is set to true, render frontImg on that card\n    \n\n\n   \n\n    render() {\n        \n\n        return (\n            <div>\n                <CardDeck \n                cardData={this.state.cards}\n                onCardClick={this.onCardClick}\n                checkCards={this.state.checkCards}\n                matched={this.state.matched}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}