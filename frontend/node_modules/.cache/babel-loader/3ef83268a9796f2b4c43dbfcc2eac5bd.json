{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/njerimurugi-kamau/Flatiron/code/PHASE4/sailor-cards/frontend/src/Game.js\";\nimport React, { Component } from 'react';\nimport CardDeck from './CardDeck';\nimport ScoreCard from './ScoreCard';\nimport Timer from './Timer';\nimport EndGame from './EndGame';\nexport class Game extends Component {\n  constructor() {\n    super();\n\n    this.onCardClick = card => {\n      console.log(this.state.checkCards.length < 2);\n\n      if (this.state.checkCards.length < 2 && !this.state.checkCards.includes(card)) {\n        this.setState({\n          checkCards: [...this.state.checkCards, card]\n        });\n      }\n\n      if (this.state.checkCards.length === 2) {\n        if (this.state.checkCards[0].pair_name === this.state.checkCards[1].pair_name) {\n          //let this state of 2 cards.push into matched cards array.push\n          let cardPair1 = this.state.checkCards[0];\n          let cardPair2 = this.state.checkCards[1];\n          this.setState({\n            matched: [...this.state.matched, cardPair1, cardPair2]\n          }); // let filterCards = this.state.cards.filter((card)=> !this.state.checkCards.includes(card))\n          // this.setState({cards: filterCards})\n          //send Patch Request \n\n          this.setState({\n            checkCards: []\n          });\n          console.log(\"you made a pair\");\n        } else {\n          console.log(\"no pair\");\n          this.setState({\n            checkCards: []\n          });\n        }\n      }\n    };\n\n    this.gameTimer = () => {\n      this.myInterval = setInterval(() => {\n        const {\n          seconds,\n          minutes\n        } = this.state;\n\n        if (seconds > 0) {\n          this.setState(({\n            seconds\n          }) => ({\n            seconds: seconds - 1\n          }));\n        }\n\n        if (seconds === 0) {\n          if (minutes === 0) {\n            clearInterval(this.myInterval);\n            console.log(this.is); // setState({gameSession: !this.state.gameSession})\n          } else {\n            this.setState(({\n              minutes\n            }) => ({\n              minutes: minutes - 1,\n              seconds: 59\n            }));\n          }\n        }\n      }, 1000);\n    };\n\n    this.state = {\n      cards: [],\n      checkCards: [],\n      matched: [],\n      minutes: 1,\n      seconds: 30,\n      gameInSession: true\n    };\n  }\n\n  componentDidMount() {\n    const cardsUrl = \"http://localhost:3000/cards\";\n    const gamesUrl = \"http://localhost:3000/games/\";\n    const charactersUrl = \"http://localhost:3000/characters/\";\n    fetch(cardsUrl).then(response => response.json()).then(cards => this.setState({\n      cards\n    }));\n    fetch(gamesUrl).then(response => response.json()).then(games => console.log(games));\n    fetch(charactersUrl).then(response => response.json()).then(characters => console.log(characters));\n    this.gameTimer();\n  }\n\n  //card is clicked, when click happens     \n  //set flipped state to true\n  // when the flipped state is set to true, render frontImg on that card\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Timer, {\n        minutes: this.state.minutes,\n        seconds: this.state.seconds,\n        gameTimer: this.gameTimer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScoreCard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardDeck, {\n        cardData: this.state.cards,\n        onCardClick: this.onCardClick,\n        checkCards: this.state.checkCards,\n        matched: this.state.matched\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EndGame, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Game;","map":{"version":3,"sources":["/Users/njerimurugi-kamau/Flatiron/code/PHASE4/sailor-cards/frontend/src/Game.js"],"names":["React","Component","CardDeck","ScoreCard","Timer","EndGame","Game","constructor","onCardClick","card","console","log","state","checkCards","length","includes","setState","pair_name","cardPair1","cardPair2","matched","gameTimer","myInterval","setInterval","seconds","minutes","clearInterval","is","cards","gameInSession","componentDidMount","cardsUrl","gamesUrl","charactersUrl","fetch","then","response","json","games","characters","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport CardDeck from './CardDeck'\nimport ScoreCard from './ScoreCard'\nimport Timer from './Timer'\nimport EndGame from './EndGame'\n\nexport class Game extends Component {\n    constructor(){\n        super();\n            this.state = {\n                cards: [],\n                checkCards: [],\n                matched: [],\n                minutes: 1,\n                seconds: 30,\n                gameInSession: true     \n            }\n    }\n\n    \n    \n    componentDidMount() {\n        const cardsUrl =\"http://localhost:3000/cards\"\n        const gamesUrl = \"http://localhost:3000/games/\"\n        const charactersUrl = \"http://localhost:3000/characters/\"\n\n            \n        fetch(cardsUrl)\n        .then((response) => response.json())\n        .then((cards) =>this.setState({cards}))\n\n        fetch(gamesUrl)\n        .then(response => response.json())\n        .then((games => console.log(games)))\n\n        fetch(charactersUrl)\n        .then(response => response.json())\n        .then((characters => console.log(characters)))\n\n        this.gameTimer()\n\n    }\n\n    onCardClick = (card) => {\n        console.log(this.state.checkCards.length < 2)\n        if(this.state.checkCards.length < 2 && !this.state.checkCards.includes(card) ){\n            this.setState({checkCards: [...this.state.checkCards, card]}\n                )\n        }if(this.state.checkCards.length === 2){ \n            if(this.state.checkCards[0].pair_name === this.state.checkCards[1].pair_name){\n                //let this state of 2 cards.push into matched cards array.push\n                let cardPair1 = this.state.checkCards[0]\n                let cardPair2 = this.state.checkCards[1]\n\n                \n\n                this.setState({matched: [...this.state.matched, cardPair1, cardPair2]})\n                // let filterCards = this.state.cards.filter((card)=> !this.state.checkCards.includes(card))\n                // this.setState({cards: filterCards})\n\n                //send Patch Request \n                this.setState({checkCards: []})\n                console.log(\"you made a pair\")\n            }else{console.log(\"no pair\")\n            this.setState({checkCards: []})\n        }\n\n        }\n    }\n\n    gameTimer =()=>{\n\n        this.myInterval = setInterval(() => {\n            const {seconds, minutes } = this.state\n\n            if(seconds > 0) {\n            \n            this.setState(({ seconds}) => ({\n                seconds: seconds - 1\n            }))\n        }\n        if (seconds === 0 ){\n            if(minutes === 0) {\n                clearInterval(this.myInterval)\n                console.log(this.is)\n                // setState({gameSession: !this.state.gameSession})\n            } else{\n                this.setState(({ minutes}) => ({\n                    minutes: minutes - 1,\n                    seconds: 59\n                }))\n            }\n        }\n        }, 1000)\n    }\n    \n\n    \n\n  \n\n    \n          \n        \n        //card is clicked, when click happens     \n        //set flipped state to true\n        // when the flipped state is set to true, render frontImg on that card\n    \n\n\n   \n\n    render() {\n        \n\n        return (\n            <div>\n                \n                <Timer \n                minutes={this.state.minutes} \n                seconds={this.state.seconds}\n                gameTimer={this.gameTimer}\n\n                />\n                <ScoreCard  />\n                <CardDeck \n                cardData={this.state.cards}\n                onCardClick={this.onCardClick}\n                checkCards={this.state.checkCards}\n                matched={this.state.matched}\n                />\n                <EndGame />\n            </div>\n        )\n    }\n}\n\nexport default Game"]},"metadata":{},"sourceType":"module"}