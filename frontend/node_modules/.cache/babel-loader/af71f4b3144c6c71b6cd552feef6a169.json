{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/njerimurugi-kamau/Flatiron/code/PHASE4/sailor-cards/frontend/src/Game.js\";\nimport React, { Component } from 'react';\nimport CardDeck from './CardDeck';\nimport Timer from './Timer'; // import ScoreCard from './ScoreCard'\n\nimport EndGame from './EndGame';\nimport Bg from '/Users/njerimurugi-kamau/Flatiron/code/PHASE4/sailor-cards/frontend/src/images/city-lights.jpeg';\nexport class Game extends Component {\n  constructor() {\n    super();\n\n    this.onCardClick = card => {\n      if (this.state.checkCards.length < 2 && !this.state.checkCards.includes(card)) {\n        this.setState({\n          checkCards: [...this.state.checkCards, card]\n        });\n      }\n\n      if (this.state.checkCards.length === 2) {\n        if (this.state.checkCards[0].pair_name === this.state.checkCards[1].pair_name) {\n          //let this state of 2 cards.push into matched cards array.push\n          let cardPair1 = this.state.checkCards[0];\n          let cardPair2 = this.state.checkCards[1];\n          this.setState({\n            matched: [...this.state.matched, cardPair1, cardPair2]\n          }); // this.setState({gameInSession: false})\n          // let filterCards = this.state.cards.filter((card)=> !this.state.checkCards.includes(card))\n          // this.setState({cards: filterCards})\n          //send Patch Request \n\n          this.setState({\n            checkCards: []\n          });\n          console.log(\"you made a pair\");\n        } else {\n          console.log(\"no pair\");\n          this.setState({\n            checkCards: []\n          });\n        }\n      }\n\n      if (this.state.matched.length === 14 || null) {\n        this.setState({\n          gameInSession: false\n        });\n        return /*#__PURE__*/_jsxDEV(EndGame, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 20\n        }, this);\n      }\n    };\n\n    this.gameTimer = () => {\n      this.myInterval = setInterval(() => {\n        const {\n          seconds,\n          minutes\n        } = this.state;\n\n        if (seconds > 0) {\n          this.setState(({\n            seconds\n          }) => ({\n            seconds: seconds - 1\n          }));\n        }\n\n        if (seconds === 0) {\n          if (minutes === 0) {\n            clearInterval(this.myInterval);\n            this.setState({\n              gameInSession: false\n            });\n          } else {\n            this.setState(({\n              minutes\n            }) => ({\n              minutes: minutes - 1,\n              seconds: 59\n            }));\n          }\n        }\n      }, 1000);\n    };\n\n    this.state = {\n      cards: [],\n      checkCards: [],\n      matched: [],\n      minutes: 0,\n      seconds: 59,\n      gameInSession: true,\n      games: []\n    };\n  }\n\n  componentDidMount() {\n    const cardsUrl = \"http://localhost:3000/cards\";\n    const gamesUrl = \"http://localhost:3000/games/\";\n    const charactersUrl = \"http://localhost:3000/characters/\";\n    fetch(cardsUrl).then(response => response.json()).then(cards => this.setState({\n      cards\n    }));\n    fetch(gamesUrl).then(response => response.json()).then(games => console.log(games)); //need to do a post request for a new game in endgame\n    //I'll also do a component did mount in end game and begin iterating \n    //that way on the scorecard I can show the new game with the already saved games\n    //if I have time let's try to render our functions in game for the score card\n    // if checkCard[0] == checkCard[1] add another caveat of a bad move vs a good move\n    //then we will try to translate this into our post request for our endgame to pass onto our scorecard\n    //EndGame < Win && Lose && ScoreCard \n    //EndGame will \n\n    fetch(charactersUrl).then(response => response.json()).then(characters => console.log(characters));\n    this.gameTimer();\n  }\n\n  // newGameScore=()=>{\n  //     // fetch(\"http://localhost:3000/games/\", {\n  //     //     method: 'POST',\n  //     //     headers: {\n  //     //       'Accept': 'application/json',\n  //     //       'Content-Type': 'application/json',\n  //     //     },\n  //     //     body: JSON.stringify({\n  //     //       firstParam: 'yourValue',\n  //     //       secondParam: 'yourOtherValue',\n  //     //     })\n  //     //   })\n  //     }\n  //card is clicked, when click happens     \n  //set flipped state to true\n  // when the flipped state is set to true, render frontImg on that card\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"city-lights\",\n        src: Bg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Timer, {\n        minutes: this.state.minutes,\n        seconds: this.state.seconds,\n        gameTimer: this.gameTimer,\n        gameOver: this.gameOver\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CardDeck, {\n        cardData: this.state.cards,\n        onCardClick: this.onCardClick,\n        checkCards: this.state.checkCards,\n        matched: this.state.matched\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EndGame, {\n        gameInSession: this.state.gameInSession,\n        matched: this.state.matched\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Game;","map":{"version":3,"sources":["/Users/njerimurugi-kamau/Flatiron/code/PHASE4/sailor-cards/frontend/src/Game.js"],"names":["React","Component","CardDeck","Timer","EndGame","Bg","Game","constructor","onCardClick","card","state","checkCards","length","includes","setState","pair_name","cardPair1","cardPair2","matched","console","log","gameInSession","gameTimer","myInterval","setInterval","seconds","minutes","clearInterval","cards","games","componentDidMount","cardsUrl","gamesUrl","charactersUrl","fetch","then","response","json","characters","render","gameOver"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport CardDeck from './CardDeck'\nimport Timer from './Timer'\n// import ScoreCard from './ScoreCard'\nimport EndGame from './EndGame'\nimport Bg from '/Users/njerimurugi-kamau/Flatiron/code/PHASE4/sailor-cards/frontend/src/images/city-lights.jpeg'\n\nexport class Game extends Component {\n    constructor(){\n        super();\n            this.state = {\n                cards: [],\n                checkCards: [],\n                matched: [],\n                minutes: 0,\n                seconds: 59,\n                gameInSession: true,\n                games: []\n            }\n    }\n\n    \n    \n    componentDidMount() {\n        const cardsUrl =\"http://localhost:3000/cards\"\n        const gamesUrl = \"http://localhost:3000/games/\"\n        const charactersUrl = \"http://localhost:3000/characters/\"\n\n            \n        fetch(cardsUrl)\n        .then((response) => response.json())\n        .then((cards) =>this.setState({cards}))\n\n        fetch(gamesUrl)\n        .then(response => response.json())\n        .then((games => console.log(games)))\n        //need to do a post request for a new game in endgame\n        //I'll also do a component did mount in end game and begin iterating \n        //that way on the scorecard I can show the new game with the already saved games\n        //if I have time let's try to render our functions in game for the score card\n        // if checkCard[0] == checkCard[1] add another caveat of a bad move vs a good move\n        //then we will try to translate this into our post request for our endgame to pass onto our scorecard\n\n        //EndGame < Win && Lose && ScoreCard \n        //EndGame will \n\n        fetch(charactersUrl)\n        .then(response => response.json())\n        .then((characters => console.log(characters)))\n\n        this.gameTimer()\n    }\n\n    onCardClick = (card) => {\n\n        if(this.state.checkCards.length < 2 && !this.state.checkCards.includes(card) ){\n            this.setState({checkCards: [...this.state.checkCards, card]}\n                )\n        }if(this.state.checkCards.length === 2){ \n            if(this.state.checkCards[0].pair_name === this.state.checkCards[1].pair_name){\n                //let this state of 2 cards.push into matched cards array.push\n                let cardPair1 = this.state.checkCards[0]\n                let cardPair2 = this.state.checkCards[1]\n\n                \n\n                this.setState({matched: [...this.state.matched, cardPair1, cardPair2]})\n                    // this.setState({gameInSession: false})\n                     // let filterCards = this.state.cards.filter((card)=> !this.state.checkCards.includes(card))\n                // this.setState({cards: filterCards})\n\n                //send Patch Request \n                this.setState({checkCards: []})\n                console.log(\"you made a pair\")\n            }  \n            else{console.log(\"no pair\")\n            this.setState({checkCards: []})\n        }\n\n    }if(this.state.matched.length === 14 || null){\n            this.setState({gameInSession: false})\n            return <EndGame />\n        }\n    }\n\n   \n\n    gameTimer =()=>{\n\n        this.myInterval = setInterval(() => {\n            const {seconds, minutes } = this.state\n\n            if(seconds > 0) {\n            \n            this.setState(({ seconds}) => ({\n                seconds: seconds - 1\n            }))\n        }\n        \n        \n        if (seconds === 0 ){\n            if(minutes === 0) {\n                \n                clearInterval(this.myInterval)\n                this.setState({gameInSession: false})\n            } else{\n                this.setState(({ minutes}) => ({\n                    minutes: minutes - 1,\n                    seconds: 59\n                }))\n            }\n        }\n        }, 1000)\n    }\n    \n    // newGameScore=()=>{\n\n\n        \n\n    //     // fetch(\"http://localhost:3000/games/\", {\n    //     //     method: 'POST',\n    //     //     headers: {\n    //     //       'Accept': 'application/json',\n    //     //       'Content-Type': 'application/json',\n    //     //     },\n    //     //     body: JSON.stringify({\n    //     //       firstParam: 'yourValue',\n    //     //       secondParam: 'yourOtherValue',\n    //     //     })\n    //     //   })\n    //     }\n    \n\n    \n\n  \n\n    \n          \n        \n        //card is clicked, when click happens     \n        //set flipped state to true\n        // when the flipped state is set to true, render frontImg on that card\n    \n\n\n   \n\n    render() {\n        \n\n        return (\n               \n            <div>\n                <img className=\"city-lights\" src={Bg}/>\n                \n                <Timer \n                minutes={this.state.minutes} \n                seconds={this.state.seconds}\n                gameTimer={this.gameTimer}\n                gameOver={this.gameOver}\n\n                />\n                {/* <ScoreCard /> */}\n            \n                <CardDeck \n                cardData={this.state.cards}\n                onCardClick={this.onCardClick}\n                checkCards={this.state.checkCards}\n                matched={this.state.matched}\n                />\n        \n                <EndGame \n                gameInSession={this.state.gameInSession}\n                matched={this.state.matched}\n\n                />\n            </div>\n        )\n    }\n    }\n\nexport default Game"]},"metadata":{},"sourceType":"module"}